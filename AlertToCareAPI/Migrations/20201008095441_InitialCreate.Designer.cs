// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlertToCareAPI.Migrations
{
    [DbContext(typeof(IcuContext))]
    [Migration("20201008095441_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("Entities.ICU", b =>
                {
                    b.Property<Guid>("IcuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BedIdPrefix")
                        .HasColumnType("TEXT");

                    b.Property<int>("BedsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Layout")
                        .HasColumnType("TEXT");

                    b.HasKey("IcuId");

                    b.ToTable("ICUs");
                });

            modelBuilder.Entity("Entities.Patient", b =>
                {
                    b.Property<string>("Mrn")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AddressMrn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BedId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNo")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ICUId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VitalsMrn")
                        .HasColumnType("TEXT");

                    b.HasKey("Mrn");

                    b.HasIndex("AddressMrn");

                    b.HasIndex("ICUId");

                    b.HasIndex("VitalsMrn");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Entities.PatientAddress", b =>
                {
                    b.Property<Guid>("Mrn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pincode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("Mrn");

                    b.ToTable("PatientAddress");
                });

            modelBuilder.Entity("Entities.Vitals", b =>
                {
                    b.Property<Guid>("Mrn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("Bpm")
                        .HasColumnType("REAL");

                    b.Property<float>("RespRate")
                        .HasColumnType("REAL");

                    b.Property<float>("Spo2")
                        .HasColumnType("REAL");

                    b.HasKey("Mrn");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("Entities.Patient", b =>
                {
                    b.HasOne("Entities.PatientAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressMrn");

                    b.HasOne("Entities.ICU", null)
                        .WithMany("Patients")
                        .HasForeignKey("ICUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Vitals", "Vitals")
                        .WithMany()
                        .HasForeignKey("VitalsMrn");
                });
#pragma warning restore 612, 618
        }
    }
}
